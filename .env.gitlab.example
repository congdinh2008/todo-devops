# GitLab CI/CD Environment Variables Configuration
# This file documents the required CI/CD variables for GitLab pipeline
# DO NOT commit this file with real values!

# =============================================================================
# Required CI/CD Variables (Configure in GitLab)
# Navigate to: Settings → CI/CD → Variables
# =============================================================================

# Docker Hub Credentials (REQUIRED)
# Create access token at: https://hub.docker.com/settings/security
DOCKER_USERNAME=your-docker-hub-username
DOCKER_PASSWORD=your-docker-hub-access-token  # Mark as MASKED in GitLab

# =============================================================================
# Optional Environment-Specific Variables
# =============================================================================

# Development Environment
VITE_API_BASE_URL_DEV=https://api-dev.example.com
BACKEND_URL_DEV=https://api-dev.example.com
FRONTEND_URL_DEV=https://dev.example.com

# Staging Environment
VITE_API_BASE_URL_STAGING=https://api-staging.example.com
BACKEND_URL_STAGING=https://api-staging.example.com
FRONTEND_URL_STAGING=https://staging.example.com

# Production Environment
VITE_API_BASE_URL_PROD=https://api.example.com
BACKEND_URL_PROD=https://api.example.com
FRONTEND_URL_PROD=https://example.com

# =============================================================================
# Deployment Configuration (Optional)
# =============================================================================

# Kubernetes Configuration (if using Kubernetes)
# KUBE_CONTEXT=your-k8s-context
# KUBE_NAMESPACE_DEV=todo-dev
# KUBE_NAMESPACE_STAGING=todo-staging
# KUBE_NAMESPACE_PROD=todo-prod

# SSH Configuration (if using SSH deployment)
# SSH_PRIVATE_KEY=your-ssh-private-key-base64  # Mark as MASKED
# DEPLOY_SERVER_DEV=dev-server.example.com
# DEPLOY_SERVER_STAGING=staging-server.example.com
# DEPLOY_SERVER_PROD=prod-server.example.com
# DEPLOY_USER=deploy

# =============================================================================
# Security Scanning Configuration (Optional)
# =============================================================================

# Trivy Configuration
# TRIVY_SEVERITY=CRITICAL,HIGH,MEDIUM
# TRIVY_SKIP_FILES=node_modules/**,test/**

# OWASP Dependency Check
# OWASP_FAIL_BUILD_ON_CVSS=8  # Fail build if CVSS score >= 8

# =============================================================================
# Notification Configuration (Optional)
# =============================================================================

# Slack Webhook (for pipeline notifications)
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL

# Microsoft Teams Webhook
# TEAMS_WEBHOOK_URL=https://outlook.office.com/webhook/YOUR/WEBHOOK/URL

# Email Notifications (configured in GitLab settings)
# NOTIFICATION_EMAIL=devops-team@example.com

# =============================================================================
# Database Configuration for Testing (Optional)
# =============================================================================
# These are configured in .gitlab-ci.yml services, but can be overridden

# POSTGRES_DB=tododb_test
# POSTGRES_USER=test
# POSTGRES_PASSWORD=test
# POSTGRES_HOST=postgres
# POSTGRES_PORT=5432

# =============================================================================
# Advanced Configuration (Optional)
# =============================================================================

# Cache Configuration
# CACHE_POLICY=pull-push  # pull, push, pull-push
# CACHE_FALLBACK_KEY=main-cache

# Docker Build Configuration
# DOCKER_BUILDKIT=1
# DOCKER_DRIVER=overlay2
# DOCKER_TLS_CERTDIR=/certs

# Maven Configuration
# MAVEN_OPTS=-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Xmx3g
# MAVEN_CLI_OPTS=--batch-mode --errors --fail-at-end --show-version

# Node.js Configuration
# NODE_OPTIONS=--max-old-space-size=4096
# NPM_CONFIG_CACHE=$CI_PROJECT_DIR/.npm

# =============================================================================
# SECURITY NOTES
# =============================================================================
#
# 1. Never commit this file with real credentials to version control
# 2. In GitLab, mark sensitive variables as "Masked" to hide them in logs
# 3. Use "Protected" flag for production secrets (only available in protected branches)
# 4. Use "Environment scope" to limit variables to specific environments
# 5. Regularly rotate credentials and access tokens
# 6. Use minimal permissions for service accounts
# 7. Enable audit logging for CI/CD variable changes
#
# =============================================================================
# HOW TO ADD VARIABLES IN GITLAB
# =============================================================================
#
# 1. Navigate to your project in GitLab
# 2. Go to Settings → CI/CD
# 3. Expand "Variables" section
# 4. Click "Add variable"
# 5. Fill in:
#    - Key: Variable name (e.g., DOCKER_USERNAME)
#    - Value: Variable value
#    - Type: Variable (default) or File
#    - Environment scope: All (default) or specific environment
#    - Flags:
#      ☑ Protected: Only available in protected branches
#      ☑ Masked: Hide value in job logs
#      ☑ Expanded: Expand variable references
# 6. Click "Add variable"
#
# =============================================================================
# VARIABLE PRECEDENCE
# =============================================================================
#
# GitLab resolves variables in this order (highest to lowest priority):
# 1. Trigger variables (API/scheduled pipelines)
# 2. Project-level CI/CD variables
# 3. Group-level CI/CD variables
# 4. Instance-level CI/CD variables
# 5. .gitlab-ci.yml defined variables
# 6. Deployment environment variables
# 7. Predefined CI/CD variables (e.g., CI_COMMIT_SHA)
#
# =============================================================================
# TESTING VARIABLES
# =============================================================================
#
# To test if variables are set correctly, add a debug job:
#
# debug:variables:
#   stage: .pre
#   script:
#     - echo "Docker Username: $DOCKER_USERNAME"
#     - echo "Password length: ${#DOCKER_PASSWORD}"
#     - echo "Backend Image: $BACKEND_IMAGE"
#     - echo "Frontend Image: $FRONTEND_IMAGE"
#   only:
#     - branches
#
# WARNING: Never echo actual password values!
#
# =============================================================================
# EXAMPLE: Minimal Setup for Getting Started
# =============================================================================
#
# For a basic setup, you only need these two variables:
#
# 1. DOCKER_USERNAME = your-docker-username
#    - Type: Variable
#    - Protected: Yes
#    - Masked: No
#
# 2. DOCKER_PASSWORD = your-docker-access-token
#    - Type: Variable
#    - Protected: Yes
#    - Masked: Yes
#
# Everything else is optional and can be configured later.
#
# =============================================================================
